invoicePagination = '';

AutoForm.addHooks(['add_invoice_form'], {
  onSuccess: function(operation, result, template) {
    /*Get the customer to message */
    console.log(result);
    Meteor.subscribe("getInvoice",result);
    last_invoice = Invoice.find({_id:result}).fetch();

    Meteor.subscribe('getOneBP',result[0].bp_predicate);
    toPhone = BusinessPartners.find({
      _id:result[0].bp_predicate
    }).fetch();
    console.log('Phone number is ', toPhone);
    FlashMessages.sendSuccess('Invoice Added');
    Router.go('/main/invoices');
  },
  onError: function(operation, result, template) {
    FlashMessages.sendError('Invoice could not be added ', result);
  }
});

Template.list_events.onRendered(function(event) {

});

invoiceUI = new Tracker.Dependency;

Template.list_invoices.helpers({
  getInvoice: function() {
    invoiceUI.depend();
    currentUser = Meteor.users.find({
      _id: Meteor.userId()
    }).fetch();
/*
    Deps.autorun(function() {
      console.log('Current user is ', currentUser);
      eventPagination = Meteor.subscribeWithPagination('getMyEvents', currentUser[0].profile.BusinessPartnerId, now, till, 10);
    });*/

    events = Events.find();
    return events;
  },
  allEventsLoaded: function() {

    if (Events.find().count() == eventPagination.loaded()) {
      return false;
    } else {
      return true;
    }
  },
  getCustomer: function(bpId){
    Meteor.subscribe("getOneBP",bpId);
    bp = BusinessPartners.find({_id:bpId},{name:1}).fetch();
    return bp[0].name;
  },
  getProduct: function(productId){
    Meteor.subscribe("getOneProduct",productId);
    product = Products.find({_id:productId}).fetch();
    return product[0].name;
  },
});

//List Events Events

Template.list_events.events({
  'click #load_more': function(event) {
    event.preventDefault();
    eventPagination.loadNextPage();
  }
});


//New Event Model Methods, delete the earlier ones, once done
Template.registerHelper("getMyCustomers", function() {
  var options = [];

  currentUserBPId = Session.get("loggedInBPId");
  console.log(currentUserBPId);
  //Get all the BP's which the logged in BP sells to
  Meteor.subscribe("getCustomerRelations", currentUserBPId);
  customer_cursor = BusinessPartnerRelations.find({
    "bp_subject": currentUserBPId,
    "relation": "sells_to"
  }).fetch();
  console.log(customer_cursor);
  bp_predicates = customer_cursor.map(function(c) {
    return c.bp_predicate[0]
  });

  Meteor.subscribe("getCustomers", bp_predicates);
  customers = BusinessPartners.find({
    _id: {
      $in: bp_predicates
    }
  }).fetch();

  customers.map(function(element) {
    options.push({
      label: element.name,
      value: element._id
    });
  });
  console.log(options);
  return options;
});


Template.registerHelper("getMyProducts", function() {
  var options = [];

  Meteor.subscribe("getUser", Meteor.userId());
  currentUser = Meteor.users.find({
    _id: Meteor.userId()
  }).fetch();

  currentUserBPId = currentUser[0].profile.BusinessPartnerId;
  //Get all the BP's which the logged in BP sells to

  Meteor.subscribe("getProductRelations", currentUserBPId);
  product_cursor = BusinessPartnerProductRelation.find({
    "bp_subject": currentUserBPId,
    "relation": "sells"
  }).fetch();

  products = product_cursor.map(function(c) {
    return c.product[0]
  });

  Meteor.subscribe("getProducts", products);
  products = Products.find({
    _id: {
      $in: products
    }
  }).fetch();

  products.map(function(element) {
    options.push({
      label: element.name,
      value: element._id
    });
  });

  return options;
});

Template.editEvent.helpers({
  selectedEvent: function() {
    Meteor.subscribe("getEvent",this._id);
    return Events.find({
      _id: this._id
    });
  },
  getCustomer: function(){

  }
});
